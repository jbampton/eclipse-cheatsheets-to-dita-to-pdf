<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task
  PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="d6e3">
   <title>Walkthrough</title>
   <shortdesc>
         <b>Introduction</b>
      <ph/>
This collection of cheat sheets will teach you how to use Debrief's Semi Automated Track Construction (SATC) capabilities.
         <ph/>
      <ph/>
      <b>Tip:</b>  If you have multiple monitors, you may wish to drag out this <b>Cheat Sheets</b> window to give 
         you more room for the multiple Debrief windows that you will use later on. 
      </shortdesc>
   <task id="d6e45">
      <title>Single Leg Solution</title>
      <shortdesc>
            <b>Introduction</b>
Let's start off with an easy scenario. We're going to work on an engagement where there is just a single leg of target data.
         </shortdesc>
      <task id="d6e80">
         <title>Finding the sample data</title>
         <shortdesc>
               There are two ways to load the sample data. We're probably going to end up modifying the sample data, 
               so you shouldn't
               do that if you're working on a set of sample data that's shared with other users  (since you 
               would be modifying the <b>master</b> copy of the data). Start off by considering if your Debrief installation folder
               is on your local machine, or on a Network Shared Folder.
            </shortdesc>
         <task id="d6e88">
            <title>Generating links to your existing data</title>
            <shortdesc>Debrief NG stores it's data in a local folder called a Project. While
			these are frequently created afresh to store new analysis data, it's also possible
			to denote your existing data directories as sub-folders (via links). This tutorial leads
			you through generating links to your existing data folders. If you've installed
			Debrief in the past, chances are you still have a Debrief installation folder (in
			C:\Program Files\Debrief 2003). If you do still have this folder, you can usefully link
			it in within this tutorial to provide some sample data. If you don't have an
			existing Debrief installation, then add the folder called <b>sample_data</b> located in
			the top-level folder of your Debrief NG installation (typically in c:\DebriefNG under MS
			Windows if you have Debrief installed locally, or in the Debrief\DebriefNG folder
			if you are on a site using a Programs folder from a shared
			network drive).</shortdesc>
            <taskbody>
               <steps>
                  <step id="d8e12">
                     <cmd>Check Navigator is open</cmd>
                     <info>In the top left hand corner of Debrief you should find the Navigator window. If
			it isn't there, select <b>Navigator</b> from Debrief's Window/Show View
			menu.</info>
                     <stepxmp/>
                  </step>
                  <step id="d8e21">
                     <cmd>Check you have a workspace</cmd>
                     <info>Before you can link in existing data, you need to define a project for your
			work. This is a parent folder within which your links are stored. If your Navigator
			window is empty, you must follow the <b>Generating a project</b> cheat-sheet accessed
			from the Help/Cheat Sheets menu.</info>
                     <stepxmp/>
                  </step>
                  <step id="d8e30">
                     <cmd>Add a new Folder</cmd>
                     <info>Right-click on your current project in the Navigator view, then select
				<b>Folder</b> from the <b>New</b> sub-menu. The New Folder wizard will open. Instead
			of creating a fresh child folder to store our data, we're going to link to an
			existing folder. So, whilst still in the New Folder Wizard, click the
			'Advanced' button to display the Advanced options. Next, click on the
			'Link to alternate location (Linked folder)', and click on
			'Browse...' to navigate to an existing data folder on your machine or the
			network, clicking on <b>Finish</b> to, erm, Finish. <ph/>
                        <b>If you don't have your own
			data</b>, please use the <b>sample_data</b> folder that's installed in your Debrief
			installation folder (for a deployed Debrief) or<ph/>
			org.mwc.cmap.combined.feature/root_installs (if you are running a development version of
			Debrief).</info>
                     <stepxmp/>
                  </step>
                  <step id="d8e55">
                     <cmd>Done</cmd>
                     <info>Well done, there you are. Just repeat this process to add any other data
			directories you want to load data from. You've probably just created a link to the
			sample data, but you may also wish to create a link to a shared working
			folder.</info>
                     <stepxmp/>
                  </step>
               </steps>
               <result>
                  <b>Conclusion</b>
                  <ph/>
                  Ok, you've found the Debrief <b>Sample Data</b>.  You're ready for the tutorial now.
               </result>
            </taskbody>
         </task>
         <task id="d6e118">
            <title>Generating links to your existing data</title>
            <shortdesc>Here we are going to copy in an existing set of sample data. We aren't
			going to link to the original set, since we don't want to modify it,
			or we don't have modify access.
			<ph/> The steps presume that the Debrief <b>Sample data</b> is in the
			<b>Debrief\DebriefNG</b> folder that is probably in a <b>Programs</b> network share.</shortdesc>
            <taskbody>
               <steps>
                  <step id="d21e20">
                     <cmd>Check Navigator is open</cmd>
                     <info>In the top left hand corner of Debrief you should find the Navigator window. If
			it isn't there, select <b>Navigator</b> from Debrief's Window/Show View
			menu.</info>
                     <stepxmp/>
                  </step>
                  <step id="d21e29">
                     <cmd>Check you have a workspace</cmd>
                     <info>Before you can import the existing data, you need to define a project for your
			work. This is a parent folder within which your data (or links to your data) is stored. If your Navigator
			window is empty, you must follow the <b>Generating a project</b> cheat-sheet accessed
			from the Help/Cheat Sheets menu.</info>
                     <stepxmp/>
                  </step>
                  <step id="d21e38">
                     <cmd>Prepare to drag in data</cmd>
                     <info>
			The sample data is going to be dragged in.  In order to do this, the relevant
			windows both need to be visible at the same time.
			<ph/>
			So, open Windows Explorer and then arrange your on-screen Windows so that Debrief
			is also visible. Then, navigate in Windows Explorer so that you can see the <b>sample_data</b>
			folder. It's in the <b>Debrief/DebriefNG</b> folder.
		</info>
                     <stepxmp/>
                  </step>
                  <step id="d21e52">
                     <cmd>Drag in sample data</cmd>
                     <info>
			Now that you are ready to import, pick up the <b>sample_data</b> folder using your mouse, and drop it into
			 a project in the <b>Navigator</b> window of Debrief.  A dialog will open asking you if you wish
			to <b>Copy files and folders</b> or <b>Link to files and folders</b>.  Select the <b>Copy</b> option.
		</info>
                     <stepxmp/>
                  </step>
               </steps>
               <result>
                  <b>Conclusion</b>
                  <ph/>
                  Ok, you've found the Debrief <b>Sample Data</b>.  You're ready for the tutorial now.
               </result>
            </taskbody>
         </task>
      </task>
   </task>
   <task id="d6e205">
      <title>Multi Leg Solution</title>
      <shortdesc>
            Now for something a little more advanced. In this tutorial we're going to work with a scenario with several targets zigs, where a number of contributions are required to get a good quality solution.
         </shortdesc>
      <task id="d6e210">
         <title>Loading the data</title>
         <shortdesc>
         We've got a Debrief plot file pre-prepared to let you avoid 
         some of the steps in the single-leg tutorial, called  <b>L2_Scenario.xml</b>.
      </shortdesc>
         <taskbody>
            <steps>
               <step id="d22e12">
                  <cmd>Find the data file</cmd>
                  <info>         
         The data-file for this tutorial is contained in the SATC sub-folder, as were the 
         files used in the previous tutorial.
      </info>
                  <stepxmp/>
               </step>
               <step id="d22e18">
                  <cmd>Drag in the file</cmd>
                  <info>         
         Before you load the data-file, close any existing Debrief plots, then drag 
         in the <b>L2_Scenario.xml</b> data-file from the SATC folder we used in the previous tutorial.
         <ph/>
                     <ph/>
         You will see a Blue Ownship track, with a bearing fan in nice pretty shades of green, purple and red.
      </info>
                  <stepxmp/>
               </step>
            </steps>
            <result/>
         </taskbody>
      </task>
      <task id="d6e218">
         <title>Grooming the data</title>
         <shortdesc>
         Let's understand the data we've got, before we start playing with it
      </shortdesc>
         <taskbody>
            <steps>
               <step id="d23e9">
                  <cmd>View the ownship track</cmd>
                  <info>         
         When you view the tutoral plot you will see an ownship track.  Use the Debrief <b>Time Controller</b> and <b>Track Tote</b> to 
         familiarise yourself with the general motion of the <b>OWNSHIP</b> track.  You'll see that it starts in the 
         North-East of the area, then travels quite slowly at 2.5 knots, with two straight legs.
      </info>
                  <stepxmp/>
               </step>
               <step id="d23e24">
                  <cmd>View the sensor data</cmd>
                  <info>         
         The identification of straight legs is pivotal to the SATC process, since they greatly constrain
         the possible solution combinations.
         <ph/>
         Just as when conducting Manual TMA generation using Debrief, the best practice for this process is to color the sensor cuts according
         to the leg they're contained in.  If you examine the Ownship sensor data, you'll see 
         that the first and second legs have been coloured in green and purple, respectively. Between each leg, a
         few cuts have been left red, to provide time for the target to make alterations.
      </info>
                  <stepxmp/>
               </step>
               <step id="d23e32">
                  <cmd>Mark the final target leg</cmd>
                  <info>         
         Whilst the first two target legs have been coloured, the last one hasn't. Let's do it now. 
         <ph/>
                     <ph/>
         Expand the sensor data
         in the Outline View, and select the sensor cuts from <b>100112 134230</b> until the end of the
         dataset, at <b>100112 140000</b>.  Now use the <b>Properties</b> view to change the color of these cuts to <b>Yellow</b> 
         (or obviously you could right-click and select Color &gt; Yellow).
      </info>
                  <stepxmp/>
               </step>
               <step id="d23e53">
                  <cmd>Create the scenario</cmd>
                  <info>
         The most significant block of information in generating a solution is the bearing data.  So, the 
         first step is to provide the bearing data.  We are going to use all of the Ownship sensor data for this
         solution, so right-click on the <b>Sensor:Plain (145 items)</b> sensor, and select <b>Semi Auto TMA</b> / 
         <b>Create new scenario from these cuts</b>.
         <ph/>As with the previous tutorial, you will see the new scenario (called <b>121200.00</b> appear in the Outline View, and the 
         <b>Maintain Contributions</b> view will open. 
         <ph/>You will also see that the <b>Maintain Contributions</b> view contains just the one contribution.
      </info>
                  <stepxmp/>
               </step>
               <step id="d23e83">
                  <cmd>Rename the scenario</cmd>
                  <info>         
         To make it easier to navigate the data, please use the <b>Properties</b> view to rename 
         the new scenario to <b>Tutorial Scenario</b>
                  </info>
                  <stepxmp/>
               </step>
               <step id="d23e95">
                  <cmd>Try to generate a solution</cmd>
                  <info>         
         Hey, why not try to generate a solution.  Just click on <b>Calculate Solution</b> at the top of the
         <b>Maintain Contributions</b> view.  You will see Debrief do a couple of seconds of processing, and then stop.
         This is because Debrief doesn't have enough information to generate a solution.  It needs to know
         one or more straight legs.         
      </info>
                  <stepxmp/>
               </step>
            </steps>
            <result/>
         </taskbody>
      </task>
      <task id="d6e226">
         <title>Playing with legs</title>
         <shortdesc>
         After the bearing measurements, knowledge of the straight legs is the most valuable set of information for SATC.
      </shortdesc>
         <taskbody>
            <steps>
               <step id="d24e9">
                  <cmd>Mark first leg</cmd>
                  <info>         
         Ok, let's mark the first leg. In the <b>Outline View</b>, expand the Ownship sensor data, and select all of the
         <b>Green</b> cuts.  Now, right-click on them, and select <b>Semi Auto TMA</b> / <b>Add to Tutorial Scenario</b> / 
         <b>Straight leg for period covered by [sensor cuts]</b>. When asked, give it the name <b>First Leg</b>.
         <ph/>
                     <ph/>
                     <b>Note:</b> selecting the cuts and "giving" them to the solution isn't actually adding
         the cuts - the solution knows about the cuts already.  We're justing using the block of cuts
          as a convenient way of specifying the start and end times for the leg.
      </info>
                  <stepxmp/>
               </step>
               <step id="d24e39">
                  <cmd>Try to generate a solution (again)</cmd>
                  <info>         
         Ok, now we should be able to generate a solution.  Again, click on <b>Calculate Solution</b> at the top of the
         <b>Maintain Contributions</b> view.  You will see Debrief do a couple of seconds of processing, you'll see
         a line graph appearing in the <b>Performance</b> area of the <b>Maintain Contributions</b> view, and a green
         line will appear on the plot.  Zooming in on the plot shows us that the single leg is 9.2 kts, at 319 degrees.  If we 
         zoom out again, we can see that, Yes, this could be a solution that fits in the data.
         <ph/>
                     <b>Note:</b> the use of randomisation in the SATC process means that your calculated speeds may well be different
         to mine. Don't worry, this is intended.
      </info>
                  <stepxmp/>
               </step>
               <step id="d24e61">
                  <cmd>Mark second leg</cmd>
                  <info>         
         Now, we'll mark the second leg. In the <b>Outline View</b>, expand the Ownship sensor data, and select all of the
         <b>Purple</b> cuts.  Now, right-click on them, and select <b>Semi Auto TMA</b> / <b>Add to Tutorial Scenario</b> / 
         <b>Straight leg for period covered by [sensor cuts]</b>. When asked, give it the name <b>Second Leg</b>.
         <ph/>The solution on the plot will disappear, since the new data means that it's probably incorrect.
         <ph/>To see the effect of the new leg, click again on the <b>Calculate Solution</b> button.
      </info>
                  <stepxmp/>
               </step>
               <step id="d24e93">
                  <cmd>Generate updated solution</cmd>
                  <info>         
         Now generate a new solution.  You'll see two legs present, the first with 12.1 knots, and the second with 14.1 knots.
         Clearly SATC has changed it's optimal solution for the first leg to a faster one that is more compliant with the data 
         in the second leg.
      </info>
                  <stepxmp/>
               </step>
               <step id="d24e100">
                  <cmd>Mark third leg</cmd>
                  <info>         
         Ok, now let's mark the third leg using the <b>Yellow</b> cuts, and re-generate the solution again.  The solution
         produced has a speed of 4.8 knots.
         <ph/>So, now we have a three-leg solution that is compliant with our sensor data, and our straight leg forecasts.
         <ph/>We can take a step to verify this by switching on the location constraints.  First, select the <b>Tutorial Scenario</b>
          in the <b>Outline View</b>. Then, in the <b>Properties</b> window, switch on <b>ShowLocationConstraints</b>. You'll see
         lots and lots of clutter on the plot. Also switch on <b>OnlyPlotLegEnds</b>.  This shows the calculated location 
         constraints at the start and end of each leg.  We can see that yes, the solution is compliant with them.
      </info>
                  <stepxmp/>
               </step>
               <step id="d24e129">
                  <cmd>Give speed constraint</cmd>
                  <info>         
         So, we've got a solution.  But, I think it can be improved.  Let's try to give the target a consistent speed. We're
         going to give a speed constraint to the whole period of the engagement. We could have done this by right-clicking on the whole <b>Sensor:Plain</b>
         object, but an alternate way of doing this is to right-click on our <b>Tutorial Scenario</b> object in the <b>Outline View</b>,  
         and selecting <b>Add Speed Forecast for period covered by [Tutorial Scenario]</b>.  A wizard will open, name the contribution
         as <b>Overall Speed</b>. You will see this new constraint displayed in the <b>Maintain Contributions</b> view - with a default set
         of hard constraints shown: zero to forty knots.
      </info>
                  <stepxmp/>
               </step>
               <step id="d24e154">
                  <cmd>Adjust speed constraint</cmd>
                  <info>
         Ok, let's generate a new solution.  A constraint of 0-40 knots isn't much of a constraint at all, so it has little effect.  So,
         expand the <b>Speed Constraint - overall speed</b> item in the <b>Maintain Contributions</b> view. Now reduce the maximum speed from 
         40 knots down to 15 knots.  If you still have the Location constraints visible, you will see them adjust to repesent the new constraint.
         <ph/>This is because the vessel can't travel as far in each leg.  Also, increase the minimum speed to 8 knots.  Re-generate the solution
         and see what you think.  
      </info>
                  <stepxmp/>
               </step>
               <step id="d24e168">
                  <cmd>Provide speed estimate</cmd>
                  <info>
         Lastly, let's try an estimate.  The estimate will make the algorithm favour solutions near that value, though
         it will still consider solutions that are still within the min/max hard constraints.  Try an estimate of 9 knots, and re-generate
         the solution.  I get a solution with speeds of 9, 13, and 9 knots.  But, I can see that if the overall solution was moved nearer to ownship,
         I may be able to achieve a consistent speed. So, now reduce the max speed to 10 knots, and re-generate the solution.  
         <ph/>This gives me legs that are 9.6, 8.9 and 9.0 knots.  I may then choose to drag in the min/max sliders to really force
         the solution onto a particular speed, but I'm ok with this answer.
      </info>
                  <stepxmp/>
               </step>
               <step id="d24e176">
                  <cmd>Verify solution</cmd>
                  <info>
         Ok, now how good is that solution?  In the <b>Outline View</b>, make the <b>SUBJECT</b> track visible.  You should see
         that the generated solution is very close to the truth track, even with this low bearing rate data.  If you wish to 
         verify the calculated solution against the truth track, you can view the XY Range plot (again) and see the separation
         between the two tracks.
      </info>
                  <stepxmp/>
               </step>
            </steps>
            <result>
               And that's all for the walkthrough of Debrief's Semi-Automatic Track Construction.  You're now on your own.
            </result>
         </taskbody>
      </task>
   </task>
</task>
