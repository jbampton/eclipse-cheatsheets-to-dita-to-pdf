<?xml version="1.0" encoding="UTF-8"?>
<?eclipse.ant.import?>
<project name="eclipse-cheatsheets-to-dita-to-pdf" default="TransformAll" basedir=".">
     
	<property name="step1.code" value="src/cheatsheet-to-dita.xsl"/>
	
		<property name="dita.output.dir" value="dita-output"/>
		<property name="path.to.saxon" value="src${file.separator}libs${file.separator}SaxonHE9-6-0-7J${file.separator}saxon9he.jar"/>
		<property name="dita.plugin.org.dita.pdf2.dir" value="src${file.separator}libs${file.separator}DITA-OT1.8.5${file.separator}plugins${file.separator}org.dita.pdf2"/>
		<property name="path.to.fop" value="src${file.separator}libs${file.separator}fop-1.1"/>
     
	
	<property file="${basedir}/local.properties"/>
	  
	  <!-- Initialize DITA-OT base directory -->
	  <dirname property="ant.file.DOST.dir" file="${ant.file.DOST}"/>
	  <condition property="dita.dir" value="${ant.file.DOST.dir}">
	    <not>
	      <isset property="dita.dir"/>
	    </not>
	  </condition>
	  <condition property="dita.dir" value="src${file.separator}libs${file.separator}DITA-OT1.8.5">
	    <not>
	      <isset property="dita.dir"/>
	    </not>
	  </condition>
	    
	  <path id="dost.class.path">
	    <pathelement location="${path.to.fop}${file.separator}build${file.separator}fop.jar"/>
	    <pathelement location="${dita.dir}${file.separator}lib${file.separator}dost.jar"/>
	  </path>
	  
	  <target name="init">
	    <dita-ot-fail id="DOTA001F">
	      <condition>
	        <and>
	          <not><equals arg1="${transtype}" arg2="troff" casesensitive="false"/></not><not><equals arg1="${transtype}" arg2="eclipsecontent" casesensitive="false"/></not><not><equals arg1="${transtype}" arg2="xhtml" casesensitive="false"/></not><not><equals arg1="${transtype}" arg2="html5" casesensitive="false"/></not><not><equals arg1="${transtype}" arg2="eclipsehelp" casesensitive="false"/></not><not><equals arg1="${transtype}" arg2="odt" casesensitive="false"/></not><not><equals arg1="${transtype}" arg2="pdf2" casesensitive="false"/></not><not><equals arg1="${transtype}" arg2="tocjs" casesensitive="false"/></not><not><equals arg1="${transtype}" arg2="wordrtf" casesensitive="false"/></not><not><equals arg1="${transtype}" arg2="docbook" casesensitive="false"/></not><not><equals arg1="${transtype}" arg2="htmlhelp" casesensitive="false"/></not><not><equals arg1="${transtype}" arg2="com.couchbase.docs.html" casesensitive="false"/></not><not><equals arg1="${transtype}" arg2="pdf" casesensitive="false"/></not><not><equals arg1="${transtype}" arg2="javahelp" casesensitive="false"/></not>
	        </and>
	      </condition>
	      <param name="1" value="${transtype}"/>
	    </dita-ot-fail>
	    <condition property="transtarget" value="pdf2" else="${transtype}">
	      <equals arg1="${transtype}" arg2="pdf" casesensitive="false"/>
	    </condition>
	    <condition property="clean.temp" value="true">
	      <not><isset property="clean.temp"/></not>
	    </condition>
	    <condition property="clean-temp.skip">
	      <isfalse value="${clean.temp}"/>
	    </condition>
	    <antcall>
	      <target name="dita2${transtarget}"/>
	      <target name="clean-temp"/>
	    </antcall>
	  </target>
	  
	  
	
	<import file="${dita.plugin.org.dita.pdf2.dir}/build_fop.xml"></import>	
	  <import file="${dita.plugin.org.dita.pdf2.dir}/build_axf.xml"/>
	  <import file="${dita.plugin.org.dita.pdf2.dir}/build_xep.xml"/>

	
			
	
	  <target name="dita2pdf2.init">
	    <dita-ot-fail id="DOTA066F">
	      <condition>
	        <and>
	          <isset property="args.xsl.pdf"></isset>
	          <not>
	            <available file="${args.xsl.pdf}" type="file"></available>
	          </not>
	        </and>
	      </condition>
	      <param name="1" location="${args.xsl.pdf}"></param>
	    </dita-ot-fail>
	    
	    <condition property="preprocess.copy-image.skip" value="true">
	      <isfalse value="${org.dita.pdf2.use-out-temp}"></isfalse>
	    </condition>
	    <condition property="retain.topic.fo" value="true">
	      <isfalse value="${org.dita.pdf2.use-out-temp}"></isfalse>
	    </condition>
	    <!-- Legacy: pass empty input directory -->
	    <condition property="user.input.dir.url" value="">
	      <istrue value="${org.dita.pdf2.use-out-temp}"></istrue>
	    </condition>
	    
	    <condition property="args.rellinks" value="none">
	      <not><isset property="args.rellinks"></isset></not>
	    </condition>
	  </target>

		<target name="dita2pdf2" depends="dita2pdf2.init, init, preprocess, map2pdf2, topic2pdf2"></target>

	  <target name="transform.topic2pdf.init">
	    <condition property="pdf2.temp.dir" value="${dita.temp.dir}" else="${dita.map.output.dir}">
	      <isfalse value="${org.dita.pdf2.use-out-temp}"></isfalse>
	    </condition>
	    
	    <property name="customization.dir" value="${dita.plugin.org.dita.pdf2.dir}/Customization"></property>
	    <property file="${customization.dir}/build.properties"></property>
	    
	    <condition property="pdf2.i18n.skip" value="true">
	      <and>
	        <isset property="org.dita.pdf2.i18n.enabled"></isset>
	        <isfalse value="${org.dita.pdf2.i18n.enabled}"></isfalse>
	      </and>
	    </condition>
	    
	    <loadfile property="default.locale">
	      <string>${default.language}</string>
	      <filterchain>
	        <tokenfilter>
	          <replaceregex pattern="-" replace="_" flags="gi"></replaceregex>
	        </tokenfilter>
	      </filterchain>
	    </loadfile>
	    
	    <property name="lib.dir" value="${dita.dir}/lib"></property>
	    <property name="fo.lib.dir" value="${path.to.fop}"></property>
	    <property name="merged.file" value="${dita.map.filename.root}_MERGED.xml"></property>
	    
	    <!-- configure FO engines -->
	    <!-- default is FOP.  Can be changed here, or with pdf.formatter property. -->
	    <property name="pdf.formatter" value="fop"></property>
	    
	    <property name="artwork.dir" value="${pdf2.temp.dir}"></property>
	    
	    <condition property="file.protocol.prefix" value="file://">
	      <os family="unix"></os>
	    </condition>
	    
	    <condition property="file.protocol.prefix" value="file:/">
	      <not><isset property="file.protocol.prefix"></isset></not>
	    </condition>
	    
	    <property name="xml.catalog.files" value="${customization.dir}/catalog.xml;${dita.plugin.org.dita.pdf2.dir}/cfg/catalog.xml;${dita.dir}/catalog-dita.xml"></property>
	    
	    <property name="xsl.dir" value="${dita.plugin.org.dita.pdf2.dir}/xsl"></property>
	    <property name="xsl.fo.dir" value="${dita.plugin.org.dita.pdf2.dir}/xsl/fo"></property>
	    <property name="xsl.common.dir" value="${dita.plugin.org.dita.pdf2.dir}/xsl/common"></property>
	    <property name="cfg.dir" value="${dita.plugin.org.dita.pdf2.dir}/cfg"></property>
	    <property name="cfg.fo.dir" value="${dita.plugin.org.dita.pdf2.dir}/cfg/fo"></property>
	    <property name="cfg.common.dir" value="${dita.plugin.org.dita.pdf2.dir}/cfg/common"></property>
	        
	    <path id="project.class.path">
	      <pathelement path="${java.class.path}"></pathelement>
	      <fileset dir="${lib.dir}/SaxonHE9-6-0-7J">
	        <include name="**/*.jar"></include>
	      </fileset>
	      <!--
	        <pathelement location="${lib.dir}/xml-apis.jar"/>
	        <pathelement location="${lib.dir}/xercesImpl.jar"/>
	      -->
	      <pathelement location="${lib.dir}/resolver.jar"></pathelement>
	      <pathelement location="${lib.dir}/icu4j.jar"></pathelement>
	      <pathelement location="${fo.lib.dir}/fo.jar"></pathelement>
	    </path>
	  </target>

	  <target name="topic2pdf2" if="noMap">
	    <antcall target="preview.topic.pdf"></antcall>
	  </target>

	  <target name="preview.topic.pdf" depends="transform.topic2pdf.init,                    preview.topic.pdf.init,                    transform.topic2pdf"></target>
	  <target name="preview.topic.pdf.init">
	    <property name="inputFile" location="${dita.temp.dir}/${user.input.file}"></property>
	    <!--property name="outputFile" location="${dita.map.output.dir}/${dita.topic.filename.root}.pdf"/-->
	    <property name="outputFile.base" value="${dita.topic.filename.root}"></property>
	    <property name="artworkPrefix" value="${artwork.dir}"></property>
	  </target>

	  <target name="map2pdf2" unless="noMap">
	    <dirname property="dita.temp.dir.fullpath" file="${dita.temp.dir}${file.separator}dummy.file"></dirname>
	    <pipeline message="topicmerge" inputmap="${dita.temp.dir.fullpath}${file.separator}${user.input.file}" tempdir="${dita.temp.dir.fullpath}">
	      <module class="org.dita.dost.module.TopicMergeModule">
	        <param name="output" location="${dita.temp.dir.fullpath}${file.separator}${dita.map.filename.root}_MERGED.xml"></param>
	        <param name="style" location="${dita.plugin.org.dita.pdf2.dir}/xsl/common/topicmerge.xsl"></param>
	      </module>
	    </pipeline>
	    <antcall target="publish.map.pdf"></antcall>
	  </target>

	  <target name="publish.map.pdf" depends="transform.topic2pdf.init,                    publish.map.pdf.init,                    transform.topic2pdf"></target>
	  <target name="publish.map.pdf.init">
	    <property name="inputFile" location="${dita.temp.dir}/${merged.file}"></property>
	    <!--property name="outputFile" location="${dita.map.output.dir}/${dita.map.filename.root}.pdf"/-->
	    <property name="outputFile.base" value="${dita.map.filename.root}"></property>
	    <property name="artworkPrefix" value="${artwork.dir}"></property>
	  </target>

	  <target name="transform.topic2fo" depends="transform.topic2fo.init,                    transform.topic2fo.index,                    transform.topic2fo.flagging,                    transform.topic2fo.main,                    transform.topic2fo.i18n"></target>
	    
	  <target name="transform.topic2fo.init">
	    <taskdef name="detect-lang" classname="com.suite.sol.ditaot.DetectLang" classpathref="project.class.path"></taskdef>
	    <taskdef name="gen-variable" classname="org.dita.dost.pdf2.VariableFileTask" classpathref="project.class.path"></taskdef>

	    <makeurl file="${inputFile}" property="inputFile.url" validate="true"></makeurl>

	    <!-- Set document.locale from xml:lang -->
	    <!-- The map takes precedence, followed by the first topic -->
	    <detect-lang documentPath="${inputFile.url}"></detect-lang>
	    
	    <tempfile property="variable.file" destdir="${dita.temp.dir}" prefix="strings." suffix=".xml"></tempfile>
	    <gen-variable file="${variable.file}">
	      <fileset dir="${customization.dir}/common/vars" erroronmissingdir="false">
	        <include name="*.xml"></include>
	      </fileset>
	      <fileset dir="${cfg.common.dir}/vars">
	        <include name="*.xml"></include>
	      </fileset>
	    </gen-variable>

	    <condition property="document.locale" value="${default.locale}">
	      <not><isset property="document.locale"></isset></not>
	    </condition>

	    <!-- WS runtime properties -->
	    <property file="${cfg.common.dir}/properties/${document.locale}.properties"></property>

	    <condition property="document.language" value="${default.language}">
	      <not><isset property="document.language"></isset></not>
	    </condition>
	    <echo level="info">Using document.locale=${document.locale}</echo>

	    <condition property="formatter.specific.ext" value="_axf">
	      <and>
	        <not><isset property="formatter.specific.ext"></isset></not>
	        <equals arg1="ah" arg2="${pdf.formatter}"></equals>
	      </and>
	    </condition>
	    <condition property="formatter.specific.ext" value="_fop">
	      <and>
	        <not><isset property="formatter.specific.ext"></isset></not>
	        <equals arg1="fop" arg2="${pdf.formatter}"></equals>
	      </and>
	    </condition>
	    <condition property="formatter.specific.ext" value="_xep">
	      <and>
	        <not><isset property="formatter.specific.ext"></isset></not>
	        <equals arg1="xep" arg2="${pdf.formatter}"></equals>
	      </and>
	    </condition>
	    <condition property="formatter.specific.ext" value="">
	      <not><isset property="formatter.specific.ext"></isset></not>
	    </condition>

	    <condition property="args.bookmark.style" value="">
	      <not><isset property="args.bookmark.style"></isset></not>
	    </condition>

	    <condition property="args.chapter.layout" value="">
	      <not><isset property="args.chapter.layout"></isset></not>
	    </condition>

	    <condition property="args.draft" value="no">
	      <not><isset property="args.draft"></isset></not>
	    </condition>

	    <condition property="publish.required.cleanup" value="${args.draft}">
	      <and>
	        <not><isset property="publish.required.cleanup"></isset></not>
	        <isset property="args.draft"></isset>
	      </and>
	    </condition>

	    <condition property="args.gen.task.lbl" value="">
	      <not><isset property="args.gen.task.lbl"></isset></not>
	    </condition>
	    <!-- use customized xsl file for pdf transform.-->
	    <condition property="temp.transformation.file" value="${args.xsl.pdf}">
	      <and>
	        <isset property="args.xsl.pdf"></isset>
	        <available file="${args.xsl.pdf}" type="file"></available>
	      </and>
	    </condition>
	    <condition property="temp.transformation.file" value="${dita.plugin.org.dita.pdf2.dir}/${args.xsl.pdf}">
	      <and>
	        <not><isset property="temp.transformation.file"></isset></not>
	        <isset property="args.xsl.pdf"></isset>
	      </and>
	    </condition>
	    
	    <condition property="args.bookmap-order" value="discard">
	      <not><isset property="args.bookmap-order"></isset></not>
	    </condition>

	    <property name="temp.transformation.file" location="${xsl.fo.dir}/topic2fo_shell${formatter.specific.ext}.xsl"></property>
	  </target>

	  <target name="transform.topic2fo.index">
	    <taskdef classname="com.idiominc.ws.opentopic.fo.index2.IndexPreprocessorTask" name="index-preprocess" classpathref="project.class.path"></taskdef>
	    
	    <condition property="index.config.file" value="${customization.dir}/common/index/${document.locale}.xml">
	      <and>
	        <not><isset property="index.config.file"></isset></not>
	        <available file="${customization.dir}/common/index/${document.locale}.xml"></available>
	      </and>
	    </condition>
	    <condition property="index.config.file" value="${cfg.dir}/common/index/${document.locale}.xml">
	      <and>
	        <not><isset property="index.config.file"></isset></not>
	        <available file="${cfg.dir}/common/index/${document.locale}.xml"></available>
	      </and>
	    </condition>
	    <condition property="index.config.file" value="${customization.dir}/common/index/${document.language}.xml">
	      <and>
	        <not><isset property="index.config.file"></isset></not>
	        <available file="${customization.dir}/common/index/${document.language}.xml"></available>
	      </and>
	    </condition>
	    <condition property="index.config.file" value="${cfg.dir}/common/index/${document.language}.xml">
	      <and>
	        <not><isset property="index.config.file"></isset></not>
	        <available file="${cfg.dir}/common/index/${document.language}.xml"></available>
	      </and>
	    </condition>
	    <condition property="index.config.file" value="${cfg.dir}/common/index/${default.language}.xml">
	      <not><isset property="index.config.file"></isset></not>
	    </condition>

	    <index-preprocess input="${inputFile.url}" output="${dita.temp.dir}/stage1.xml" indexConfig="${index.config.file}" locale="${document.locale}" catalogs="${xml.catalog.files}"></index-preprocess> 
	  </target>

	  <target name="transform.topic2fo.flagging" depends="transform.topic2fo.flagging.filter,                    transform.topic2fo.flagging.no-filter"></target>
	  <target name="transform.topic2fo.flagging.filter" if="dita.input.valfile">
	    <condition property="_org.dita.pdf2.valfile" value="${dita.input.valfile}">
	      <available file="${dita.input.valfile}" type="file"></available>
	    </condition>
	    <condition property="_org.dita.pdf2.valfile" value="${dita.plugin.org.dita.pdf2.dir}/${dita.input.valfile}">
	      <not><isset property="_org.dita.pdf2.valfile"></isset></not>
	    </condition>
	    <makeurl property="_org.dita.pdf2.valfile.url" file="${_org.dita.pdf2.valfile}" validate="no"></makeurl>
	    <xslt in="${dita.temp.dir}/stage1.xml" out="${dita.temp.dir}/stage1a.xml" style="${xsl.fo.dir}/flagging-preprocess.xsl">
	      <param name="filterFile" expression="${_org.dita.pdf2.valfile.url}"></param>
	      <xmlcatalog>
	        <catalogpath path="${xml.catalog.files}"></catalogpath>
	      </xmlcatalog>
	    </xslt>
	  </target>
	  <target name="transform.topic2fo.flagging.no-filter" unless="dita.input.valfile">
	    <copy file="${dita.temp.dir}/stage1.xml" tofile="${dita.temp.dir}/stage1a.xml"></copy>
	  </target>  

	  <target name="transform.topic2fo.main">
	    <!--makeurl seems to output file:/C: style instead of file:///C:, but xep, fop, and ah all accept it.-->
	    <makeurl property="artworkPrefixUrl" file="${artworkPrefix}"></makeurl>
	    <makeurl property="dita.map.output.dir.url" file="${pdf2.temp.dir}" validate="no"></makeurl>
	    <makeurl property="work.dir.url" file="${dita.temp.dir}" validate="no"></makeurl>
	    <makeurl property="customization.dir.url" file="${customization.dir}"></makeurl>
	    <makeurl property="user.input.dir.url" file="${dita.input.dirname}"></makeurl>
	    <makeurl property="variable.file.url" file="${variable.file}"></makeurl>

	    <xslt style="${temp.transformation.file}" in="${dita.temp.dir}/stage1a.xml" out="${dita.temp.dir}/stage2.fo">
	      <param name="locale" expression="${document.locale}"></param>
	      <param name="customizationDir.url" expression="${customization.dir.url}"></param>
	      <param name="input.dir.url" expression="${user.input.dir.url}"></param>
	      <param name="DRAFT" expression="${args.draft}"></param>
	      <param name="output.dir.url" expression="${dita.map.output.dir.url}"></param>
	      <param name="work.dir.url" expression="${work.dir.url}"></param>
	      <param name="artworkPrefix" expression="${artworkPrefixUrl}"></param>
	      <param name="publishRequiredCleanup" expression="${publish.required.cleanup}"></param>
	      <param name="antArgsBookmarkStyle" expression="${args.bookmark.style}"></param>
	      <param name="antArgsChapterLayout" expression="${args.chapter.layout}"></param>
	      <param name="include.rellinks" expression="${include.rellinks}"></param>
	      <param name="antArgsGenerateTaskLabels" expression="${args.gen.task.lbl}"></param>
	      <param name="pdfFormatter" expression="${pdf.formatter}"></param>
	      <param name="useFrameIndexMarkup" expression="${org.dita.pdf2.index.frame-markup}"></param>
	      <param name="bookmap-order" expression="${args.bookmap-order}"></param>
	      <param name="variableFiles.url" expression="${variable.file.url}"></param>
	      
	      <xmlcatalog>
	        <catalogpath path="${xml.catalog.files}"></catalogpath>
	      </xmlcatalog>
	    </xslt>
	  </target>

	  <target name="transform.topic2fo.i18n" depends="transform.topic2fo.i18n.filter,                    transform.topic2fo.i18n.no-filter"></target>
	  <target name="transform.topic2fo.i18n.filter" unless="pdf2.i18n.skip">
	    <taskdef classname="com.idiominc.ws.opentopic.fo.i18n.PreprocessorTask" name="i18n-preprocess" classpathref="project.class.path"></taskdef>
	    
	    <condition property="i18n.config.file" value="${customization.dir}/fo/i18n/${document.locale}.xml">
	      <and>
	        <not><isset property="i18n.config.file"></isset></not>
	        <available file="${customization.dir}/fo/i18n/${document.locale}.xml"></available>
	      </and>
	    </condition>
	    <condition property="i18n.config.file" value="${cfg.fo.dir}/i18n/${document.locale}.xml">
	      <and>
	        <not><isset property="i18n.config.file"></isset></not>
	        <available file="${cfg.fo.dir}/i18n/${document.locale}.xml"></available>
	      </and>
	    </condition>
	    <condition property="i18n.config.file" value="${customization.dir}/fo/i18n/${document.language}.xml">
	      <and>
	        <not><isset property="i18n.config.file"></isset></not>
	        <available file="${customization.dir}/fo/i18n/${document.language}.xml"></available>
	      </and>
	    </condition>
	    <condition property="i18n.config.file" value="${cfg.fo.dir}/i18n/${document.language}.xml">
	      <and>
	        <not><isset property="i18n.config.file"></isset></not>
	        <available file="${cfg.fo.dir}/i18n/${document.language}.xml"></available>
	      </and>
	    </condition>
	    <condition property="i18n.config.file" value="${cfg.fo.dir}/i18n/${default.language}.xml">
	      <not><isset property="i18n.config.file"></isset></not>
	    </condition>

	    <i18n-preprocess input="${dita.temp.dir}/stage2.fo" output="${dita.temp.dir}/stage3.fo" config="${i18n.config.file}" catalogs="${xml.catalog.files}"></i18n-preprocess> 

	    <xslt in="${dita.temp.dir}/stage3.fo" out="${pdf2.temp.dir}/topic.fo" style="${xsl.fo.dir}/i18n-postprocess.xsl">
	      <xmlcatalog>
	        <catalogpath path="${xml.catalog.files}"></catalogpath>
	      </xmlcatalog>
	    </xslt>
	  </target>
	  <target name="transform.topic2fo.i18n.no-filter" if="pdf2.i18n.skip">
	    <echo level="info">Skip I18N font processing.</echo>
	    <move file="${dita.temp.dir}/stage2.fo" tofile="${pdf2.temp.dir}/topic.fo"></move>
	  </target>

	  <target name="transform.topic2pdf" depends="copyCoreArtwork,transform.topic2fo,transform.fo2pdf,delete.fo2pdf.topic.fo"></target>

	  <target name="delete.fo2pdf.topic.fo" unless="retain.topic.fo">
	    <delete>
	      <!--Deleting the stage files isn't necessary, since it will be cleaned by clean-temp, and is useful for debugging.-->
	      <!--<fileset dir="${dita.temp.dir}" includes="stage?.*"/>-->
	      <fileset dir="${pdf2.temp.dir}" includes="topic.fo"></fileset>
	    </delete>
	  </target>

	  <target name="transform.fo2pdf" depends="transform.fo2pdf.xep,transform.fo2pdf.ah,transform.fo2pdf.fop"></target>

	  <target name="copyCoreArtwork">
	    <copy todir="${artwork.dir}/Configuration/OpenTopic" failonerror="false">
	      <fileset dir="${dita.plugin.org.dita.pdf2.dir}" includes="cfg/common/artwork/**/*.*"></fileset>
	    </copy>
	    <copy todir="${artwork.dir}/Customization/OpenTopic" failonerror="false">
	      <fileset dir="${customization.dir}" includes="common/artwork/**/*.*"></fileset>
	    </copy>
	  </target>

	
	
	
	
	
	<target name="xslt2">
	   <!-- create the root Ditamap file an the four child task files  -->
   		<xslt in="test.xml" out="${dita.output.dir}/map.ditamap" style="${step1.code}" force="true">
   			<classpath location="${path.to.saxon}" />
   		</xslt>
	</target>
	<target name="TransformAll" depends="xslt2" />
	
	
	
	
	
	
	
	
	
	
</project>