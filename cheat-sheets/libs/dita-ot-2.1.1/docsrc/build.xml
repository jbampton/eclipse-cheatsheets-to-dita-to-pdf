<?xml version="1.0" encoding="UTF-8"?>
<!--This file is part of the DITA Open Toolkit project. See the accompanying LICENSE.md file for applicable licenses.-->

<project name="docs" default="all" basedir=".">
  <description>Build DITA Open Toolkit Documentation</description>

  <property environment="env"/>

  <condition property="dita.home" value="${basedir}/..">
    <not><isset property="env.DITA_HOME"/></not>
  </condition>

  <property name="dita.home" location="${env.DITA_HOME}"/>
  <condition property="doc.out.dir" value="${dita.home}/doc" else="${basedir}/out">
    <available file="${basedir}/../lib/dost.jar" type="file"/>
  </condition>

  <macrodef name="dita-ot">
    <attribute name="transtype"/>
    <attribute name="input"/>
    <attribute name="output"/>

    <element name="properties" optional="yes"/>

    <sequential>
      <antcall>
        <target name="generate-msg-topic"/>
        <target name="generate-params-topic"/>
      </antcall>

      <ant antfile="${dita.home}/build.xml">
        <property name="args.input" location="@{input}"/>
        <property name="output.dir" location="@{output}"/>
        <property name="transtype" value="@{transtype}"/>
        <properties/>
      </ant>
    </sequential>
  </macrodef>

  <target name="check-dita-home">
    <available file="${dita.home}/lib/dost.jar" type="file" property="dita-ot.available"/>

    <fail unless="dita-ot.available">${dita.home}/lib/dost.jar not found.

    Does ${dita.home} contain a working DITA-OT installation?

    Set the $DITA_HOME environment variable or the dita.home Ant property to
    point to a working DITA-OT installation:

    Either:

      $ export DITA_HOME=/path/to/dita-ot
      $ ant ...

    Or:

      $ ant -Ddita.home=/path/to/dita-ot
    </fail>
  </target>

  <target name="init" depends="check-dita-home">
    <property name="resource.dir" location="${dita.home}/resources"/>
    <property name="ditaval.file" location="${basedir}/platform.ditaval"/>
  </target>

  <target name="generate-msg-topic" depends="init" description="Regenerate message file">
    <property name="message.xsl" location="${basedir}/resources/messages.xsl"/>
    <property name="message.input" location="${resource.dir}/messages.xml"/>
    <property name="message.outputtopic" location="${basedir}/user-guide/DITA-messages.xml"/>

    <!--ant antfile="${dita.home}/integrator.xml" useNativeBaseDir="true"/-->
    <xslt in="${message.input}" out="${message.outputtopic}" style="${message.xsl}"/>
  </target>

  <target name="generate-params-topic" depends="init" description="Regenerate parameters file">
    <property name="params.xsl" location="${basedir}/resources/params.xsl"/>
    <property name="params.input" location="${resource.dir}/plugins.xml"/>
    <property name="params.outputtopic" location="${basedir}/parameters/ant-parameters.dita"/>
    <dirname property="params.outputdir" file="${params.outputtopic}"/>
    <makeurl property="params.outputdir.uri" file="${params.outputdir}" validate="false"/>
    
    <!--ant antfile="${dita.home}/integrator.xml" useNativeBaseDir="true"/-->
    <xslt in="${params.input}" out="${params.outputtopic}" style="${params.xsl}" force="yes">
      <param name="output-dir.url" expression="${params.outputdir.uri}"/>
    </xslt>
  </target>

  <target name="generate-platform-filter" depends="init" description="Generate platform filter file">
    <condition property="platform" value="windows">
      <os family="windows"/>
    </condition>

    <condition property="platform" value="osx">
      <os family="mac"/>
    </condition>

    <condition property="platform" value="unix">
      <os family="unix"/>
    </condition>

    <echoxml file="${ditaval.file}">
      <val>
        <prop action="include" att="platform" val="${platform}"/>
        <prop action="exclude" att="platform"/>
      </val>
    </echoxml>
  </target>

  <target name="filter-platform" depends="generate-platform-filter" description="Filter output by current platform">
    <property name="args.filter" location="${ditaval.file}"/>
  </target>

  <target name="pdf">
    <dita-ot transtype="pdf" input="userguide-book.ditamap" output="${doc.out.dir}">
      <properties>
        <property name="outputFile.base" value="userguide"/>
      </properties>
    </dita-ot>
  </target>

  <target name="html">
    <dita-ot transtype="tocjs" input="userguide.ditamap" output="${doc.out.dir}">
      <properties>
        <property name="args.copycss" value="yes"/>
        <property name="args.css" value="dita-ot-doc.css"/>
        <property name="args.cssroot" value="resources"/>
        <property name="args.csspath" value="css"/>
        <property name="args.gen.task.lbl" value="YES"/>
        <property name="outputFile.base" value="index"/>
      </properties>
    </dita-ot>

    <move file="${doc.out.dir}/userguide.html"
      tofile="${doc.out.dir}/index.html"/>
  </target>

  <target name="htmlhelp">
    <dita-ot transtype="htmlhelp" input="userguide.ditamap" output="${doc.out.dir}/htmlhelp">
      <properties>
        <property name="args.copycss" value="yes"/>
        <property name="args.css" value="dita-ot-doc.css"/>
        <property name="args.cssroot" value="resources"/>
        <property name="args.csspath" value="css"/>
        <property name="args.gen.task.lbl" value="YES"/>
      </properties>
    </dita-ot>

    <move todir="${doc.out.dir}" failonerror="no">
      <fileset dir="${doc.out.dir}/htmlhelp" includes="*.chm"/>
    </move>

    <delete dir="${doc.out.dir}/htmlhelp"/>
  </target>

  <target name="clean">
    <delete dir="${doc.out.dir}"/>
    <delete dir="${ditaval.file}" failonerror="false"/>
  </target>

  <target name="all" depends="pdf, html, htmlhelp"/>

</project>
