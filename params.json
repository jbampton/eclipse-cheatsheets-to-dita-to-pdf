{
  "name": "Eclipse-cheatsheets-to-dita-to-pdf",
  "tagline": "Transforms Eclipse cheat sheets to PDF via the DITA Open Toolkit, Eclipse, Apache FOP, Saxon, Apache Ant, XSL, XML",
  "body": "#Eclipse cheat sheets to DITA to PDF\r\n\r\nI worked on the [open source](https://en.wikipedia.org/wiki/Open_source) [Java](https://www.oracle.com/java/index.html) based project [Debrief](http://debrief.info/) the leading maritime analysis tool.  This project is based on some parts of the document publishing that I did in the Debrief project.  The list of resources at the bottom of this README describe the technologies being used.\r\n\r\nThe original project created a set of DITA XML files and one highly customized [PDF](https://acrobat.adobe.com/au/en/products/about-adobe-pdf.html) and there are a couple of example PDFs that can be seen in the root of this repository.  Recently I added support for other output formats that are not customized including HTMLHelp, TocJS and XHTML.\r\n\r\nThis program runs inside [Eclipse](https://www.eclipse.org/), an [integrated development environment](https://en.wikipedia.org/wiki/Integrated_development_environment) (IDE) and is mainly a Java based project in that all the code libraries use Java ([Apache FOP](https://xmlgraphics.apache.org/fop/), [Saxon](https://sourceforge.net/projects/saxon/files/Saxon-HE/), [DITA Open Toolkit](http://www.dita-ot.org/), [Apache ANT](http://ant.apache.org/), Eclipse) and it also uses [XSL](https://www.w3.org/Style/XSL/) and [XML](https://www.w3.org/XML/) heavily. Using Eclipse allows us to create a publishing pipeline creating all the working output formats one after the other, in one click by building the project.   Development was originally done in [oXygen XML Editor](https://www.oxygenxml.com) then ported to Eclipse. \r\n\r\nSince Java is now ranked number one on the [TIOBE Index](http://www.tiobe.com/tiobe_index), this project aims to be a easy to follow tutorial on all the technologies listed.\r\n\r\nWait until this webpage fully loads and then jump ahead to the various sections in this README.md by using the links below:\r\n\r\n - [Build instructions](#build-instructions)\r\n - [Build instructions - OS X](#build-instructions-mac-os-x)\r\n - [Homebrew usage](#homebrew-usage)\r\n - [List of resources](#list-of-resources-and-technologies-used-on-this-github-project)\r\n - [Licenses](#license)\r\n\r\nThe roadmap for this project is to keep the \"info.debrief\" custom DITA-OT plugin up to date with the latest current version of DITA-OT, in depth instructions on how to get up and running inside Eclipse and lots more.\r\n\r\nWhen built and run this project takes a set of [Eclipse cheat sheets](http://help.eclipse.org/mars/index.jsp?topic=%2Forg.eclipse.platform.doc.user%2Freference%2Fref-cheatsheets.htm) and transforms them to PDF.  Eclipse cheat sheets are obviously best viewed inside Eclipse.  Using PDF allows us to print nicely formatted cheat sheets on paper which allows the user to work through the cheat sheets with a pen and check off each item as they go.  Using cheat sheets physically on paper was seen as a new way to learn and was the original concept of the Debrief cheat sheets publishing project I worked on.\r\n\r\n[Darwin Information Typing Architecture](https://en.wikipedia.org/wiki/Darwin_Information_Typing_Architecture) (DITA) is an XML data model for authoring and using DITA-OT you can publish those ideas. The DITA standard is maintained by the [OASIS](https://www.oasis-open.org/) [DITA Technical Committee](https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=dita).  Some of the largest and most successful companies in the world use DITA. The next link is an informal list of [companies using DITA](http://www.ditawriter.com/companies-using-dita/).\r\n\r\nIt's a two-step process first the DITA XML is created from the Eclipse cheat sheets (XML files) and then you use the DITA-Open Toolkit to create the PDF from the auto created DITA files.\r\n\r\nThe two parts of the transformation and rendering comprise of:\r\n\r\n1.\t- This is the transformation step and it uses cheatsheet-to-dita.xsl which requires an XSLT 2.0 compliant processor.\r\n\t- I used the open source product Saxon from [Saxonica](http://www.saxonica.com/welcome/welcome.xml) which came included with the DITA-OT 2.2.1 library.\r\n\t- This file takes as input a collection on XML files (Eclipse cheat sheets) and creates multiple output files - a parent DITA Map and some associated tasks.\r\n\t- The \"output/debrief\" and sub \"dita\" folder contains the dynamically created (transformed) DITA files from this step. \r\n\t\r\n\t\r\n2.\t- This is the rendering (printing) step and the 'info.debrief' custom DITA-OT plugin produces the PDF via the DITA-OT base libraries and a XSL - Formatting Objects Processor (FO Processor)\r\n\t- The \"output/debrief/pdf\" folder contains the resulting PDF output from this step\r\n\t- I used Apache FOP 2.1 for the FO Processor\r\n\r\nIf you are not already Gung-Ho on Java and all things tech, then try a few short online courses:\r\n\r\n- https://www.codecademy.com/learn/learn-java\r\n- https://www.codecademy.com/learn/learn-the-command-line\r\n- https://www.codeschool.com/courses/try-git\r\n- https://www.codecademy.com/learn/learn-git\r\n\r\nAnd then come train in the [REAL DOJO](http://www.codewars.com) and reach your highest potential, become **faster**, **stronger** and **more powerful**......**JEDI MASTER LEVEL**.....**!??!?!!**  \r\n\r\n\r\n##Yo let's build...watch the Star Wars build run on Youtube....BrisVegas Jedi Master Style...\r\n\r\n[See the build run full screen in 1080p](https://youtu.be/LJ5DsFP_THo)\r\n\r\n[&#8593;](#eclipse-cheat-sheets-to-dita-to-pdf) [&#8595;](#license)\r\n\r\n##Build Instructions\r\n\r\nThe project was originally developed on OS X and the documentation below lists the instructions on how to set up and build the project for OS X.\r\n\r\nThe [Windows build instructions](https://github.com/jbampton/eclipse-cheatsheets-to-dita-to-pdf/wiki/Windows-Build-Instructions) for this project will be soon on this repositories wiki. \r\n\r\n[&#8593;](#eclipse-cheat-sheets-to-dita-to-pdf) [&#8595;](#license)\r\n\r\n##Build Instructions Mac OS X\r\n\r\n###Install Git\r\n\r\nOn OS X, open your Applications folder, then open the Utilities folder. Open the Terminal application.\r\n\r\n![OS X terminal](documentation/images/osx/terminal.png)\r\n\r\nIn the terminal type:\r\n\r\n####git --help\r\n\r\nThis will either print the usage of the git command if git is already installed, or trigger the Command Line Tools (OS X) for Xcode to install.\r\n\r\nAfter the Command Line Tools are installed go back to the terminal and type:\r\n\r\n####man git\r\n\r\n![man git](documentation/images/man/man-git.png)\r\n\r\nUse the up and down arrows to navigate through the man page and press 'q' to quit.\r\n\r\nYou can then type:\r\n\r\n####which git\r\n\r\n![which git](documentation/images/git/which-git.png)\r\n\r\nYou can run the next command after you have cloned this project:\r\n\r\n####git status\r\n\r\n![git status](documentation/images/git/git-status.png)\r\n\r\n[&#8593;](#eclipse-cheat-sheets-to-dita-to-pdf) [&#8595;](#license)\r\n\r\n###Install Java\r\n\r\nFirst you should check if Java is already installed on your system. \r\n\r\nIn a terminal type the following commands:\r\n\r\n####java\r\n\r\nIf Java is installed you will see the Java help message like the image below. \r\n\r\n![java](documentation/images/java/java.png)\r\n\r\nIf Java is not installed you need to install the Java Development Kit (JDK) as Eclipse needs Java to run so you should first read the [Java Platform, Standard Edition Installation Guide](https://docs.oracle.com/javase/8/docs/technotes/guides/install/install_overview.html)\r\n\r\nSo then go to: http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\r\n\r\nChoose the JDK version for your [Operating System](https://en.wikipedia.org/wiki/Operating_system).\r\n\r\nIf it's installed you can read up about Java more by typing:\r\n\r\n####java -version\r\n\r\n![java -version](documentation/images/java/java-version.png)\r\n\r\n####man java\r\n\r\n![man java](documentation/images/man/man-java.png)\r\n\r\n[&#8593;](#eclipse-cheat-sheets-to-dita-to-pdf) [&#8595;](#license)\r\n\r\n###Install Eclipse\r\n\r\nGo to: [Eclipse Downloads](https://www.eclipse.org/downloads/?osType=macosx)\r\n\r\n![Eclipse Downloads](documentation/images/eclipse/download_eclipse.png)\r\n\r\nIn the box near top labelled \"Try the Eclipse Installer\", click on \"64 bit\" under \"Mac OS X\".\r\n\r\nDownload Eclipse installer application.\r\n\r\nYou should check the checksum of the Eclipse file you download.\r\n\r\nDepending on which type of checksum you choose: MD5, SHA1, SHA-512 the commands are slightly different:\r\n\r\nFirst you should click on the checksum type in the image below:\r\n\r\n![Eclipse checksums](documentation/images/eclipse/eclipse_checksums.png)\r\n\r\nI used SHA-512 so in a terminal in the directory or folder where you downloaded the Eclipse package to, the command to type would be:\r\n\r\n####shasum -a 512 eclipse-inst-mac64.tar.gz\r\n![eclipse shasum](documentation/images/terminal/example_shasum.png)\r\n\r\nYou should check the output of the shasum command matches what's displayed on the Eclipse website for the type of checksum you choose.  You can select the text in the terminal, copy it and then find it on the Eclipse website.\r\n\r\nFor more information on the shasum or md5 command open a terminal and type:\r\n\r\n####man shasum  \r\n![man shasum](documentation/images/man/man_shasum.png)\r\n\r\n####man md5\r\n![man md5](documentation/images/man/man_md5.png)\r\n\r\nUse the up and down arrows on the keyboard to navigate through the man page documentation.\r\n\r\nTo exit from the man pages type: q\r\n\r\nUnzip resulting download (eclipse-inst-mac64.tar.gz) by double-clicking on it if downloader did not already unzip it.\r\n\r\nRun \"Eclipse Installer\" application.\r\n\r\nChoose \"Eclipse IDE for Java Developers\" option. (Other options and Eclipse modules are not necessary for this build.)\r\n\r\n![Eclipse installer](documentation/images/eclipse/eclipse-installer-1.png)\r\n\r\nThis option allows you to specify an \"Installation Folder.\" The default option may be a folder within your individual directory.\r\n\r\n![Eclipse Installer install location](documentation/images/eclipse/eclipse-installer-2.png)\r\n\r\nIt will be more useful to change this and install Eclipse within a directory titled \"Eclipse\" within the system's main Application directory.\r\n\r\nClick on the folder icon to navigate to the Applications directory and create an \"Eclipse\" target sub-directory before installing.\r\n\r\n![Applications - Eclipse folder](documentation/images/osx/applications-folder-eclipse.png)\r\n\r\n![Eclipse Installer install location](documentation/images/eclipse/eclipse-installer-3.png)\r\n\r\nThen click the \"Install\" button.\r\n\r\nYou will be presented with the Eclipse Foundation Software User Agreement, so click \"Accept Now\" after reading it. \r\n\r\n![Eclipse Foundation Software User Agreement](documentation/images/eclipse/eclipse-software-user-agreement.png)\r\n\r\nThe installation process may take a few minutes and you will be presented with a green \"installing\" loading bar style indicator.\r\n\r\n![Installing Eclipse](documentation/images/eclipse/eclipse-installer-4.png)\r\n\r\nWhen Eclipse has finished installing you will be presented with the \"Launch\" green button.\r\n\r\n![Eclipse is now installed](documentation/images/eclipse/eclipse-installer-5.png)\r\n\r\nLaunch Eclipse for the first time. Doing so will ask you to Select a \"workspace.\" The default option \"/Users/[your username]/Documents/workspace\" will work fine.\r\n\r\n![Eclipse select workspace](documentation/images/eclipse/eclipse-select-workspace.png)\r\n\r\nQuit Eclipse for now.\r\n\r\n[&#8593;](#eclipse-cheat-sheets-to-dita-to-pdf) [&#8595;](#license)\r\n\r\n###Install GitHub Desktop\r\n\r\nThe build's repository is found within GitHub, and the \"GitHub Desktop for Mac\" application will allow you to clone and work on the build more easily, while retaining a link to the primary source, and thus obtaining updates and having the option to submit modifications which could be candidates for inclusion.  GitHub Desktop is currently available for both OS X and Windows.\r\n\r\nGo to: [GitHub Desktop](https://desktop.github.com/)\r\n\r\n![GitHub Desktop](documentation/images/github/github_desktop.png)\r\n\r\nClick on the \"Download GitHub Desktop\" button.\r\n\r\nUnzip the resulting file: GitHub Desktop 216.zip\r\n\r\nThis expands to: GitHub Desktop\r\n\r\nMove this to your system's Applications directory.\r\n\r\n![Applications directory](documentation/images/osx/applications_folder.png)\r\n\r\n[&#8593;](#eclipse-cheat-sheets-to-dita-to-pdf) [&#8595;](#license)\r\n\r\n###Clone the project to your desktop computer\r\n\r\nGo to the GitHub repository for this project:\r\n\r\n[https://github.com/jbampton/eclipse-cheatsheets-to-dita-to-pdf](https://github.com/jbampton/eclipse-cheatsheets-to-dita-to-pdf)\r\n\r\nClick on the icon just to left of \"Download ZIP\" that when you hover your mouse over it, it will display \"Save jbampton/eclipse-cheatsheets-to-dita-to-pdf to your computer and use in GitHub Desktop\"\r\n\r\n![Clone my repository](documentation/images/github/clone_repo.png)\r\n\r\nYou will be presented with a dialog box that will ask if you want to open the link with GitHub Desktop. The dialog box will look different depending on which web browser you are using.  Below is how the dialog boxes look like:\r\n\r\nGoogle Chrome\r\n\r\n![Chrome dialog](documentation/images/dialogs/chrome_dialog.png)\r\n\r\nYou will need to click launch application.\r\n\r\nFirefox\r\n\r\n![Firefox dialog](documentation/images/dialogs/firefox_dialog.png)\r\n\r\nYou will need to select \"GitHub Desktop\" then click \"OK\"\r\n\r\nIn the \"Clone As:\" dialog box, accept the default option, which is to create a clone with the same name as the original: eclipse-cheatsheets-to-dita-to-pdf\r\n\r\nClick the \"Clone\" button.\r\n\r\nYou will see a progress bar indicating the progress of files being downloaded from GitHub onto your desktop computer, into a local repository directory.\r\n\r\nQuit GitHub Desktop.\r\n\r\n[&#8593;](#eclipse-cheat-sheets-to-dita-to-pdf) [&#8595;](#license)\r\n\r\n###Install Homebrew and Apache Ant\r\n\r\nThe project uses [Homebrew](http://brew.sh/) and I installed Apache Ant inside Homebrew with the [Ant](http://brewformulas.org/Ant) Homebrew formula.  Towards the bottom of this README.md there is some information on Homebrew usage.\r\n\r\n[&#8593;](#eclipse-cheat-sheets-to-dita-to-pdf) [&#8595;](#license)\r\n\r\n###Import project into Eclipse\r\n\r\nLaunch Eclipse.\r\n\r\nIn menu bar, choose: File > Import \r\n\r\n![File import](documentation/images/eclipse/eclipse_file_import.png)\r\n\r\nThen > General > Existing Projects into Workspace -> click \"Next\"\r\n\r\n![General -> Existing Projects](documentation/images/eclipse/eclipse_general_existing.png)\r\n\r\nYou will be presented with the next dialog\r\n\r\n![Import projects](documentation/images/eclipse/import_projects.png)\r\n\r\nClick \"Browse\" next to \"Select root directory\"\r\n\r\nNavigate to the \"eclipse-cheatsheets-to-dita-to-pdf\" project, which (by default) should be within the \"Users/[your user name]/GitHub\" directory (or wherever you put it when you cloned it to your desktop).\r\n\r\n![GitHub folder](documentation/images/osx/github_folder.png)\r\n\r\nThis will bring the project into Eclipse.\r\n\r\nIf you have not already done so, click on the \"Workspace\" button so that you can view the project.\r\n\r\nYou must add the JAR files from DITA-OT to Ant inside Eclipse. \r\n\r\nGo to Eclipse -> Preferences\r\n\r\n![Eclipse Preferences](documentation/images/eclipse/eclipse_preferences.png)\r\n\r\nThen -> Ant -> Runtime -> Classpath tab -> click \"Global Entries\"\r\n\r\n![Ant Runtime Classpath Global Entries](documentation/images/eclipse/ant_runtime_global_entries.png)\r\n\r\nThen -> click \"Add JARs\" - you will be presented with the next dialog\r\n\r\n![Add JARs](documentation/images/eclipse/add_jars.png)\r\n\r\nThen-> expand 'eclipse-cheatsheets-to-dita-to-pdf' and navigate to \"src/libs/dita-ot-2.2.1/lib\" and add all the JAR files from that directory.    Make sure to click \"Apply\" and then click \"Ok\".\r\n\t\r\nRight click on build.xml and select -> Run As -> Ant Build -> (first one)\r\n\r\n![Run the build](documentation/images/ant/ant_build.png)\r\n\r\nThis should run and build all tasks, creating all working output formats in one go.\r\n\r\nThis process re-creates the DITA XML output in the \"output\" directory.  There should be five DITA files, one parent Ditamap at and 4 task files with the Ditamap at the root of the \"output/debrief\" folder with task files together in the sub folder \"dita\"\r\n\r\nThe final resulting PDF should be called map.pdf and located in the \"pdf\" folder.\r\n\r\nThere are currently 4 other output formats (Docbook, HTMLHelp, TocJS, XHTML) as seen by the names of the folders in the \"output/debrief\" directory.  The PDF output is vastly superior to the others which have no customization.  The Docbook output is a work in progress. \r\n\r\nIf you want to choose which output formats to render, you can right click on \"build.xml\" and select -> Run As -> Ant Build -> (second one). \r\n\r\n![Ant Build](documentation/images/ant/ant_build2.png)\r\n\r\nThen select which output format you would like on the \"Targets\" tab under \"Check targets to execute\".\r\n\r\nThe base target is \"xslt2\", this creates the DITA-XML files from the input Eclipse cheat sheets (XML).  You must have the \"xslt2\" target checked if you are running any other targets other than \"TransformALL\"\r\n\r\nFinally click \"Run\".\r\n\r\n![Ant Edit Config](documentation/images/ant/ant_edit_config.png)\r\n\r\n[&#8593;](#eclipse-cheat-sheets-to-dita-to-pdf) [&#8595;](#license)\r\n\r\n\t\r\n##How DITA-OT PDF Plugins work\r\n\r\nPlugins are placed in the DITA-OT plugins directory.  You can see the plugin I built in this directory named \"info.debrief\".\r\n\r\n![info.debrief plugin location](documentation/images/dita/info.debrief_plugin_location.png)\r\n\r\nWhen ready a plugin must be integrated into DITA-OT using **Apache Ant**.  I built this project using OS X and I installed Ant through **Homebrew**.  \r\n \r\nOn the command line from inside the root DITA-OT folder it would be -> ant -f integrator.xml\r\n\r\nYou can also run the integrator inside Eclipse as an Ant build by right clicking on \"src/libs/DITA-OT1.8.5/integrator.xml\" and selecting -> Run As -> Ant Build (first one) and this should integrate the plugin with the toolkit.\r\n\r\n![Run DITA-OT integrator inside eclipse with Ant](documentation/images/eclipse/eclipse_run_dita_ot_integrator.png)\r\n\r\nEvery DITA-OT PDF plugin has a file name plugin.xml at its root where you set the configuration values. The plugin id must match the folder name of the plugin.  Every plugin has a \"transtype\" -> this plugins transtype is \"debrief\".  You can see the plugin.xml file and where to set the plugin id and transtype in the next image:\r\n\r\n![plugin.xml](documentation/images/dita/transtype.png)\r\n\r\nPDF Plugins are comprised of some XML config files, some artwork and some custom XSL (XSLT/XSL-FO/XPath) code \r\nDITA-OT provides that base XSL code that you 'override' with your custom work.\r\n\r\nThe two main files that configure plugins are <u>plugin.xml</u> and <u>integrator.xml</u> which should be in the root of the plugin folder.  The \"cfg\" folder contains the rest of the customization.\r\n\r\nCustom XSL can be placed in two XSL files both named \"custom.xsl\".  I placed all the custom code at \"src/libs/DITA-OT1.8.5/plugins/info.debrief/cfg/fo/xsl/custom.xsl\" for this project.  The other file is seen in the adjacent \"attrs\" directory. \r\n \r\n![custom.xsl](documentation/images/dita/custom.xsl.png) \r\n \r\nPlacing the custom code only in these two files follows best practice techniques on how to build a DITA-OT PDF plugin.\r\n\r\n[&#8593;](#eclipse-cheat-sheets-to-dita-to-pdf) [&#8595;](#license)\r\n\r\n\r\n##Homebrew usage\r\n\r\n[Homebrew](http://brew.sh) is an amazing package management system for OS X that installs the stuff you need that Apple didn't.\r\n\r\n[Homebrew Formula](http://brewformulas.org) are written in Ruby.\r\n\r\nYou install Homebrew via the command line as shown in my short [Homebrew install video](https://www.youtube.com/watch?v=Ird_MGf3m0Q).\r\n\r\nIf you install Homebrew you should try to run brew update daily.\r\n\r\nI made another [video on Homebrew](https://www.youtube.com/watch?v=IonWEFStPio) which runs for under minute that shows the typical brew update command.\r\n\r\nOnce you have installed Homebrew you can run through the basic commands below.\r\n\r\nOpen a terminal and type:\r\n\r\n###brew -v\r\n\r\n![brew -v](documentation/images/homebrew/brew-v.png)\r\n\r\n###man brew\r\n![man brew](documentation/images/man/man_brew.png)\r\n\r\n**Before using Homebrew you should ensure it's up to date. Run the next command:**\r\n\r\n###brew doctor\r\n![brew doctor](documentation/images/homebrew/brew_doctor.png)\r\n\r\n###brew update\r\n![brew update](documentation/images/homebrew/brew_update.png)\r\n\r\n###Example output of running a brew install command.  The image shows pouring brews from their bottles\r\n![pouring brews](documentation/images/homebrew/pouring_brews.png)\r\n\r\n###brew list\r\n![brew list](documentation/images/homebrew/brew_list.png)\r\n\r\n[&#8593;](#eclipse-cheat-sheets-to-dita-to-pdf) [&#8595;](#license)\r\n\r\n\r\n##List of resources and technologies used on this GitHub project\t\r\n\r\nEclipse - https://eclipse.org/ \r\n\r\nEclipse cheat sheets - http://help.eclipse.org/mars/index.jsp?topic=%2Forg.eclipse.platform.doc.user%2Freference%2Fref-cheatsheets.htm\r\n\r\nThe Apache Software Foundation - http://www.apache.org/\r\n\r\nApache FOP - https://xmlgraphics.apache.org/fop/\r\n\r\nApache ANT - http://ant.apache.org\r\n\r\nSaxon XSLT - https://en.wikipedia.org/wiki/Saxon_XSLT\r\n\r\nSaxon - http://saxon.sourceforge.net/\r\n\r\nSaxonica - http://www.saxonica.com/welcome/welcome.xml\r\n\r\nOnline community for the Darwin Information Typing Architecture OASIS Standard - http://dita.xml.org/\r\n\r\nDITA - https://en.wikipedia.org/wiki/Darwin_Information_Typing_Architecture\r\n\r\nDITA-Open Toolkit - http://www.dita-ot.org/\r\n\r\nW3C - The Extensible Stylesheet Language Family (XSL) - http://www.w3.org/Style/XSL/\r\n\r\nW3C XSLT 2.0 - http://www.w3.org/TR/xslt20/ \r\n\r\nXSL Formatting Objects - https://en.wikipedia.org/wiki/XSL_Formatting_Objects\r\n\r\nXSL-FO Processors - http://www.w3.org/community/ppl/wiki/XSL-FO_Processors\r\n\r\nXML - https://en.wikipedia.org/wiki/XML\r\n\r\nAdobe PDF - https://en.wikipedia.org/wiki/Portable_Document_Format\r\n\r\nAdobe Acrobat Reader DC - https://get.adobe.com/reader/\r\n\r\nXHTML - https://en.wikipedia.org/wiki/XHTML\r\n\r\nDublin Core Metadata Initiative - http://dublincore.org/\r\n\r\nMicrosoft HTML Help 1.4 - https://msdn.microsoft.com/en-us/library/windows/desktop/ms670169(v=vs.85).aspx\r\n\r\nThe Organization for the Advancement of Structured Information Standards (OASIS) - https://en.wikipedia.org/wiki/OASIS_(organization)\r\n\r\noXygen XML Editor - http://www.oxygenxml.com\r\n\r\nDITA to TocJS - http://www.dita-ot.org/1.8/readme/dita2tocjs.html\r\n\r\nDITA-OT installing plugins - http://dita-ot.sourceforge.net/1.7/dev_ref/plugins-installing.html\r\n\r\nGenerate sample DITA-OT plugin - https://dita-generator-hrd.appspot.com/pdf-plugin/\r\n\r\nCreating DITA-OT plugins - http://dita-ot.sourceforge.net/1.5.4/dev_ref/plugins-overview.html\r\n\r\nCustomizing PDF output - http://www.dita-ot.org/1.8/readme/dita2pdf-customization.html\r\n\r\nXSLT FAQ. Docbook FAQ. Braille. - http://www.dpawson.co.uk/\r\n\r\nHomebrew — The missing package manager for OS X - http://brew.sh/ \r\n\r\nInstall Ant with Homebrew - http://brewformulas.org/Ant\r\n\r\nInstalling Apache Ant - http://ant.apache.org/manual/install.html\r\n\r\nCodecademy - Learn the Command Line - https://www.codecademy.com/courses/learn-the-command-line\r\n\r\nCodecademy - Learn Java - https://www.codecademy.com/learn/learn-java\r\n\r\nGot 15 minutes and want to learn Git? https://try.github.io/levels/1/challenges/1\r\n\r\nRuby regular expression editor - http://rubular.com/\r\n\r\nEssential programmer training - http://www.codewars.com/\r\n\r\nMastering Markdown - https://guides.github.com/features/mastering-markdown/\r\n\r\nGitHub Desktop - https://desktop.github.com/\r\n\r\nMicrosoft File Checksum Integrity Verifier - https://www.microsoft.com/en-au/download/details.aspx?id=11533\r\n\r\nTechSmith Camtasia - https://www.techsmith.com/camtasia.html\r\n\r\nMD5 - https://en.wikipedia.org/wiki/MD5\r\n\r\nsha1sum - https://en.wikipedia.org/wiki/Sha1sum\r\n\r\nIDE - Integrated Development Environment - https://en.wikipedia.org/wiki/Integrated_development_environment\r\n\r\nGit (software) - https://en.wikipedia.org/wiki/Git_(software)\r\n\r\nman page - https://en.wikipedia.org/wiki/Man_page\r\n\r\nTerminal (OS X) - https://en.wikipedia.org/wiki/Terminal_(OS_X)\r\n\r\n[&#8593;](#eclipse-cheat-sheets-to-dita-to-pdf) [&#8595;](#license)\r\n\r\n##License\r\n\r\nThe DITA Open Toolkit and Apache FOP are licensed for use under the the Apache Software Foundation License v2.0.\r\n\r\nSaxon uses the Mozilla Public License Version 2.0.\r\n\r\n[&#8593;](#eclipse-cheat-sheets-to-dita-to-pdf) [&#8595;](#license)\r\n\r\n##Contributions\r\nFork and pull request. Simple.\r\n\r\n[&#8593;](#eclipse-cheat-sheets-to-dita-to-pdf)\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}